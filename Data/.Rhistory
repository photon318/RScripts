,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
getSymbols("HOLX", src = "google", auto.assign = TRUE);
chartSeries(HOLX
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
View(HOLX)
library(quantmod)
S = getSymbols("HOLX", src = "google", auto.assign = TRUE);
chartSeries(S
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("HOLX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("HOLX", src = "google", auto.assign = FALSE);
chartSeries(S.Volume
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
View(S)
View(S)
chartSeries(HOLX.Volume
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("HOLX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("HOLX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("HOLX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("HOLX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("MELI", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "201708/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("MELI", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("UNM", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
View(S)
library(quantmod)
S = getSymbols("AIG", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("AIG", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("AIG", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("TSLA", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("TSLA", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("VRTX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("VRTX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2010/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("VRTX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2010/201709"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("VRTX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2010/201710"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("VRTX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2010/201710"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
library(quantmod)
S = getSymbols("VRTX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201710"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
setwd("~/Desktop/ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
dataset = read.csv("Salary_Data.csv")
library(caTools)
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split= TRUE )
traing_set = subset(dataset, split = FALSE )
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split= TRUE )
test_set = subset(dataset, split = FALSE )
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split= TRUE )
test_set = subset(dataset, split = FALSE )
test_set = 1
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split= TRUE )
test_set = subset(dataset, split = FALSE )
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split== TRUE )
test_set = subset(dataset, split == FALSE )
regressor  = lm( formula = Salary ~ YearsExperiene,
traing_set)
regressor  = lm( formula = Salary ~ YearsExperience,
traing_set)
library()
summary(regressor)
y_pred = predict( regressor, new_data = test_set)
y_pred
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split== TRUE )
test_set = subset(dataset, split == FALSE )
regressor  = lm( formula = Salary ~ YearsExperience,
traing_set)
y_pred = predict( regressor, new_data = test_set)
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split== TRUE )
test_set = subset(dataset, split == FALSE )
regressor  = lm( formula = Salary ~ YearsExperience,
data = traing_set)
y_pred = predict( regressor, new_data = test_set)
y_pred
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split== TRUE )
test_set = subset(dataset, split == FALSE )
regressor  = lm( formula = Salary ~ YearsExperience,
data = traing_set)
y_pred = predict( regressor, new_data = test_set)
y_pred
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, splint== TRUE )
test_set = subset(dataset, split == FALSE )
View(test_set)
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split == TRUE )
test_set = subset(dataset, split == FALSE )
regressor  = lm(formula = Salary~YearsExperience,
data = traing_set)
y_pred = predict( regressor, new_data = test_set)
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split == TRUE )
test_set = subset(dataset, split == FALSE )
regressor  = lm(formula = Salary~YearsExperience,
data = traing_set)
y_pred = predict( regressor, new_data = test_set)
y_pred = predict( regressor, newdata = test_set)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
traing_set = subset(dataset, split == TRUE )
test_set = subset(dataset, split == FALSE )
regressor  = lm(formula = Salary~YearsExperience,
data = traing_set)
y_pred = predict( regressor, newdata = test_set)
#visualization
#install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
ggplot()
+ geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = 'red')
+ geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), colour = 'blue')
+ ggtitle('SALARY vs EXPERIENCE')
+ xlab('Years')
+ ylab('Salary')
ggplot()
+ geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = 'red')
ggplot()
+ geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary))
ggplot()
+ geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), training_set)
ggplot()
+ geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), data = training_set)
dataset = read.csv("Salary_Data.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2/3)
training_set = subset(dataset, split == TRUE )
test_set = subset(dataset, split == FALSE )
regressor  = lm(formula = Salary~YearsExperience,
data = training_set)
y_pred = predict( regressor, newdata = test_set)
#visualization
#install.packages("ggplot2")
library(ggplot2)
ggplot()
+ geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), data = training_set)
ggplot()
+ geom_point(data = training_set)
library(ggplot2)
ggplot()
+ geom_point(training_set, aes(x = training_set$YearsExperience, y = training_set$Salary))
ggplot()
+ geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary))
ggplot(training_set)
+ geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red')
ggplot(training_set) +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), colour = 'blue')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor,
newdata = training_set)), colour = 'blue')
+ ggtitle('SALARY vs EXPERIENCE')
+ xlab('Years')
+ ylab('Salary')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor,
newdata = training_set)), colour = 'blue') +
ggtitle('SALARY vs EXPERIENCE') +
xlab('Years') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor,
newdata = training_set)), colour = 'blue') +
ggtitle('SALARY vs EXPERIENCE (prediction)') +
xlab('Years') +
ylab('Salary')
setwd("/Users/Alexz/Documents/GitHub/RScripts/Data")
dataset = read.csv("Salary_Data.csv")
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, 2 / 3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor  = lm(formula = Salary ~ YearsExperience,
data = training_set)
y_pred = predict(regressor, newdata = test_set)
#visualization
#install.packages("ggplot2")
library(ggplot2)
#plotting training set data with lin.regression line
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(
x = training_set$YearsExperience,
y = predict(regressor,
newdata = training_set)
), colour = 'blue') +
ggtitle('SALARY vs EXPERIENCE') +
xlab('Years') +
ylab('Salary')
#plotting test data with traied lin. regression line
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(
x = training_set$YearsExperience,
y = predict(regressor,
newdata = training_set)
), colour = 'blue') +
ggtitle('SALARY vs EXPERIENCE (prediction)') +
xlab('Years') +
ylab('Salary')
#plotting both train dataset and test data set over lin. regression line
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'green') +
geom_line(aes(
x = training_set$YearsExperience,
y = predict(regressor,
newdata = training_set)
), colour = 'blue') +
ggtitle('SALARY vs EXPERIENCE (prediction)') +
xlab('Years') +
ylab('Salary')
#lets see if regression line will be changed if to train this on full dataset
#creating new regression objec and training it
regressor_full  = lm(formula = Salary ~ YearsExperience,
data = dataset)
y_full_predict = predict(regressor_full, newdata = dataset)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'green') +
# Attempt to see y_ values predicted by trained full data.
# Yes they are on the exact trainded line.
geom_point(aes(x = dataset$YearsExperience, y = y_full_predict),
colour = 'orange') +
#trained on recuded samples
geom_line(aes(
x = training_set$YearsExperience,
y = predict(regressor,
newdata = training_set)
), colour = 'blue') +
#regresion on full set of original set
geom_line(aes(
x = dataset$YearsExperience,
y = predict(regressor_full,
newdata = dataset)
), colour = 'orange') +
ggtitle('SALARY vs EXPERIENCE (prediction)') +
xlab('Years') +
ylab('Salary')
library(quantmod)
library(quantmod)
library(ggplot2)
symb = getSymbols("TSLA",
src = "google",
auto.assign = FALSE) # autoassign false to load into variable.
#chartSeries(MSFT)
#chartSeries(MSFT, subset='last 4 months')
chartSeries(symb, subset='2016/2017', TA=c(addRSI(2),addROC(),addVo()), show.grid = TRUE, theme =chartTheme("black"))
getSymbols("PCLN",
src = "google",
auto.assign = TRUE) # autoassign false to load into variable.
#MSFT_ret = as.integer(periodReturn(MSFT, period = 'weekly', subset = '2006/2016') * 100)
returns = periodReturn(NVDA, period = 'monthly', subset = '2006/2017') * 100
ret_3d = matrix( returns, 11, 12, dimnames = list(c(2006:2016), c(rep("month", 12))) )
ret_3d
persp(ret_3d, theta = 0, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed"
#,      xlab = "X", ylab = "Y", zlab = "Sinc( r )"
)
library(quantmod)
S = getSymbols("VRTX", src = "google", auto.assign = FALSE);
chartSeries(S
,subset = "2017/201710"
,TA=c(addRSI(2), addATR(2))
,type = c("bars")
,theme = chartTheme("black")
#,up.col = FALSE, dn.col = FALSE, color.vol = FALSE
)
